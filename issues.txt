Must-have before shipping

* Documentation + Explain the issue with base64, hexadecimal

* Add command line capacity

* Add benchmark

* If possible, split modules into separate files



Nice to have later
* Add support to binary data [try to use prevalence of nulls for this last one]

* Right now the ciphertext distribution is assumed, implicitly, to be a uniform
distribution over the range of the plaintext distribution.
This is true for 'classic' use cases, but is not always true.
This is low priority right now because:
1. The implicit ciphertext distribution is only used to compute the unicity distance
2. Fixing this will be fairly involved work.
But it should be fixed eventually.


* Make key choice take into account the issue of divisibility. E.g. sort by increasing score; create cutoff where largest disparity takes place; all keys above the cutoff graduate; start iterating on 'trees' of key lengths 

* Full mathematical analysis of "coincidence" distribution? (Science fiction, even if you solve the naive problem you still have the issue of 'leaky probabilities', if key size = 2 how does this affect the distribution of coincidences for key size = 7? The answer exists in theory but will involve the word 'coprime'. But maybe more attainable than it seems at first sight: some willingness to approximate + Markov bound will maybe help)


Won't fix

* Replace raw index of coincidence with modeling as bernoulli variable, which can naturally account for length of block vs number of coincidences
Won't fix reason: Not enough mathematical knowledge to accurately model the variable

